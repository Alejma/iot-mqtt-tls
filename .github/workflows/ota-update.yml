name: OTA Update to ESP32 via MQTT

on:
  push:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    env:
      DEVICE_TOPIC: dispositivo/device1/ota
      FIRMWARE_VERSION: 1.1.0
      FIRMWARE_NAME: firmware_v1.1.0.bin

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Set up PlatformIO
        run: pip install platformio

      - name: Build firmware
        run: platformio run

      - name: Upload to S3
        run: |
          aws s3 cp .pio/build/esp32dev/firmware.bin s3://${{ secrets.S3_BUCKET_NAME }}/$FIRMWARE_NAME \
            --content-type application/octet-stream
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      - name: Publish MQTT OTA message
        run: |
            pip install paho-mqtt
            python3 -c "
            import os, json
            import paho.mqtt.publish as publish
            payload = json.dumps({
            'version': os.getenv('FIRMWARE_VERSION'),
            'url': f'https://{os.getenv('S3_BUCKET_NAME')}.s3.{os.getenv('AWS_REGION')}.amazonaws.com/{os.getenv('FIRMWARE_NAME')}'
            })
            publish.single(
              topic=os.getenv('DEVICE_TOPIC'),
              payload=payload,
              hostname=os.getenv('MQTT_BROKER'),
              port=int(os.getenv('MQTT_PORT')),
              auth={ 'username': os.getenv('MQTT_USER'), 'password': os.getenv('MQTT_PASSWORD') } if os.getenv('MQTT_USER') else None,
              tls={} if os.getenv('MQTT_TLS', 'false') == 'true' else None
            )
            print('âœ… Mensaje OTA MQTT enviado')
            "